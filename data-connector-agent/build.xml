<?xml version="1.0" encoding="UTF-8"?>

<!--
 Copyright 2007 Google Inc.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

NOTE: configure.sh edits the outputted build.xml make changes to build.xml-dist.

Build File for Secure Data Connector client and reference server.

  Interesting targets:
   -all: builds distros
   -compile: creates all the jars.
   -install: builds jars and runs setup.sh

$Id: build.xml-dist 525 2010-02-17 01:03:08Z davidc616 $
-->

<project
    name="secure-data-connector"
    default="deploy"
    basedir=".">

  <taskdef resource="net/sf/antcontrib/antcontrib.properties">
    <classpath>
      <pathelement location="third-party/antcontrib/ant-contrib-1.0b2.jar"/>
    </classpath>
  </taskdef>

  <!-- PROPERTIES -->
  <property file="build.properties" />
  <property environment="env" />

  <!-- TARGETS -->
  <target name="timestamp">
    <tstamp>
      <format property="timestamp" pattern="MMddyyyyhhmm"/>
    </tstamp>
  </target>

  <target name="buildstamp">
    <tstamp>
      <format property="buildstamp" pattern="MM-dd-yyyy hh:mm"/>
    </tstamp>
  </target>

  <target name="init" depends="buildstamp, timestamp">
    <mkdir dir="${build}" />
    <mkdir dir="${classes}" />
  </target>

  <target
      name="clean"
      description="Deletes all build files." >
    <delete dir="${build}" />
    <delete dir="${bin}" />
    <delete dir="${deploy}" />
  </target>

  <!-- Protocol Buffer compiler steps -->
  <target name="check-for-protoc">
    <available file="protoc" filepath="${env.PATH}" property="protoc_exists"/>
  </target>

  <target name="protoc-all-protos"> <!-- if="protoc_exists" depends="check-for-protoc"-->
    <foreach param="proto-to-compile" target="compile-proto">
      <path>
        <fileset dir="${src}">
          <include name="**/*.proto"/>
        </fileset>
      </path>
    </foreach>
  </target>

  <target name="compile-proto">
    <exec executable="${protoc}">
      <arg value="--java_out=${src-generated}"/>
      <arg value="--proto_path=${basedir}"/>
      <arg value="${proto-to-compile}"/>
    </exec>
  </target>

  <target name="compile" depends="init, protoc-all-protos" >

    <javac
        srcdir="${src-generated}"
        destdir="${classes}"
        debug="${COMPILE_DEBUG_FLAG}"
        debuglevel="${COMPILE_DEBUG_LEVEL}"
        includes="**"
        >
      <classpath>
        <pathelement path="third-party/protobuf/protobuf-java-2.4.1.jar"/>
      </classpath>
    </javac>

    <javac
        srcdir="${src}"
        destdir="${classes}"
        debug="${COMPILE_DEBUG_FLAG}"
        debuglevel="${COMPILE_DEBUG_LEVEL}"
        includes="**"
        >
      <classpath>
        <pathelement path="third-party/apache-log4j/log4j-1.2.15.jar"/>
        <pathelement path="third-party/commons-cli/commons-cli-1.1.jar"/>
        <pathelement path="third-party/commons-logging/commons-logging-1.1.jar"/>
        <pathelement path="third-party/easymock/easymock.jar"/>
        <pathelement path="third-party/google-collect-1.0-rc2/google-collect-1.0-rc2.jar"/>
        <pathelement path="third-party/google-feedserver/commons-beanutils-core-1.8.0.jar"/>
        <pathelement path="third-party/google-feedserver/gdata-client-1.0.jar"/>
        <pathelement path="third-party/google-feedserver/gdata-core-1.0.jar"/>
        <pathelement path="third-party/google-feedserver/google-feedserver-java-client-2.0.jar"/>
        <pathelement path="third-party/httpcomponents-core-4.0.1/httpcore-4.0.1.jar"/>
        <pathelement path="third-party/httpcomponents-core-4.0.1/httpcore-nio-4.0.1.jar"/>
        <pathelement path="third-party/httpcomponents-client-4.0.1/httpclient-4.0.1.jar"/>
        <pathelement path="third-party/httpcomponents-client-4.0.1/httpmime-4.0.1.jar"/>
        <pathelement path="third-party/guice/guice-2.0.jar"/>
        <pathelement path="third-party/jsocks/jsocks.jar"/>
        <pathelement path="third-party/json/json.jar"/>
        <pathelement path="third-party/protobuf/protobuf-java-2.4.1.jar"/>
      </classpath>
    </javac>

    <!-- create agent jar -->
    <tstamp/>
    <jar jarfile="${agent.jarfile}">
      <fileset dir="${classes}">
        <include name="**"/>
        <exclude name="com/google/dataconnector/protocol/proto/**"/>
      </fileset>
      <manifest>
        <attribute name="Implementation-Title" value="Secure Data Connector"/>
        <attribute name="Implementation-Version" value="SDC ${version} Built: ${buildstamp}"/>
        <attribute name="Implementation-Vendor" value="Google"/>
        <attribute name="Main-Class"
              value="com.google.dataconnector.client.Client"/>
      </manifest>
    </jar>

    <jar jarfile="${generated.protocol.jarfile}">
      <fileset dir="${classes}">
        <include name="com/google/dataconnector/protocol/proto/**"/>
      </fileset>
      <manifest>
        <attribute name="Implementation-Title" value="Secure Data Connector Protocol Generated Files"/>
        <attribute name="Implementation-Version" value="SDC ${version} Built: ${buildstamp}"/>
        <attribute name="Implementation-Vendor" value="Google"/>
      </manifest>
    </jar>

    <!-- Source Jars -->
    <tstamp/>
    <jar jarfile="${agent-src.jarfile}">
      <fileset dir="${src}">
        <include name="com/google/dataconnector/**" />
      </fileset>
      <manifest>
        <attribute name="Implementation-Title" value="Secure Data Connector"/>
        <attribute name="Implementation-Version" value="SDC ${version} Built: ${buildstamp}"/>
        <attribute name="Implementation-Vendor" value="Google"/>
      </manifest>
    </jar>
  </target>

  <target name="deploy" depends="expand-all-jars">
    <delete file="${agent-deploy.jarfile}" />
    <jar jarfile="${agent-deploy.jarfile}" basedir="${deploy}">
      <manifest>
        <attribute name="Implementation-Title" value="Secure Data Connector"/>
        <attribute name="Implementation-Version" value="SDC ${version} Built: ${buildstamp}"/>
        <attribute name="Implementation-Vendor" value="Google"/>
        <attribute name="Main-Class"
              value="com.google.dataconnector.client.Client"/>
      </manifest>
    </jar>
  </target>

  <target name="expand-all-jars" depends="compile">
    <mkdir dir="${deploy}"/>
    <!-- unjar all third party jars -->
    <foreach param="jar-to-expand" target="expand-jar">
      <path>
        <fileset dir="${basedir}">
          <include name="third-party/**/*.jar"/>
          <include name="build/*.jar"/>
        </fileset>
      </path>
    </foreach>
  </target>

 <target name="expand-jar">
   <unjar src="${jar-to-expand}" dest="${deploy}"/>
 </target>


  <!-- install -->
  <target name="install" depends="compile">
    <exec executable="./install-sdc.sh" failonerror="true"/>
  </target>

  <target name="all" depends="test,compile,install"/>

  <!-- Start of Testing-related stuff -->
  <property name="testSrc.home"       value="src/javatests"/>
  <property name="testClasses.home"   value="${build}/testClasses/"/>
  <property name="testOutput.home"    value="${build}/testOutput"/>
  <property name="junit.jar"          location="third-party/junit/junit-4.4.jar"/>

  <path id="classpath.test">
    <pathelement location="${testClasses.home}" />
    <pathelement location="${agent.jarfile}" />
    <pathelement location="${generated.protocol.jarfile}" />
    <fileset dir="third-party">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <target name="test" depends="compile,cleanTests,compileTests">
      <mkdir dir="${testOutput.home}"/>
      <junit haltonfailure="yes" printsummary="yes">
        <classpath refid="classpath.test"/>
        <formatter type="plain" usefile="true" />
        <batchtest todir="${testOutput.home}">
          <fileset dir="${testSrc.home}">
            <include name="**/*Test.java"/>
          </fileset>
        </batchtest>
      </junit>
  </target>

  <target name="compileTests" depends="cleanTests" description="Compile Tests">
    <mkdir dir="${testClasses.home}"/>
    <javac
        srcdir="${testSrc.home}"
        destdir="${testClasses.home}"
        classpathref="classpath.test"
        debug="true"
        debuglevel="lines,vars,source">
    </javac>
  </target>

  <target
      name="cleanTests"
      description="Delete old build and dist directories">
    <delete dir="${testClasses.home}"/>
    <delete dir="${testOutput.home}"/>
  </target>

  <!-- End of Testing-related stuff -->

</project>

