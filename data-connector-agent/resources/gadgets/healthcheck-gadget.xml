<?xml version="1.0" encoding="UTF-8"?>

<!-- Copyright 2008 Google Inc.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

-->
<Module>
  <ModulePrefs 
    title="SDC Prober"
    author="vasu n"
    author_email="vnori@google.com"
    author_affiliation="google"
    description="SDC prober"
    height="400"
    width="800"
    scaling="true">
    <Require feature="opensocial-0.8" />
    <Require feature="minimessage"/>
    <Require feature="dynamic-height"/> 
  </ModulePrefs>  
  
  <UserPref
    name="run_freq" 
    display_name="Run tests at this freq (min): " 
    datatype="string"
    required ="true" 
    default_value="30"
  />
  
  <Content type="html">
  <![CDATA[ 
    
    <style>                    
      .title_div {    
        font-family: trebuchet ms;
        font-size: 20px;
        text-transform: capitalize;
      }
            
      .resultDisplay_div {
        margin-right: 3%;
        margin-left: 3%;
        text-align: center;
        border: 1px solid black;
        font-family: trebuchet ms;
        display : none;
      }
             
       .result_table {
        width: 100%;
        text-align: left;       
        border-width: 2px;
        border-style: solid;
        border-color: gray;
        border-collapse: separate;
        background-color: white;
      }
 
     .result_table th {
       font-size: 16px;
       text-align: left;
       border-width: 1px;
       padding: 2px;
       border-style: solid;
       border-color: gray;
       background-color: #FFF5E;
     }
      
     .result_table td {
       font-size: 14px;
       text-align: left;
       border-width: 1px;
       padding: 2px;
       border-style: solid;
       border-color: gray;
       background-color: #FFF5EE;
     }
     
     .warn {
       color: #F00;
     }
   </style>
    
   <div id = "statusBar"> </div>     
   <div id = "resultDisplayRegion" align = "centre" class = "resultDisplay_div">
     <table id = "resultTable" class = "result_table" >
       <thead>
         <th>Client Id</th>
         <th>latency (msec)</th>       
         <th>status</th>       
       </thead>   
     </table>
   </div>
       
   <script type="text/javascript">

     /** 
      * detect the domain name by parsing the url
      */
     function detectDomainName() {
       var params = location.href.split('&');
       for (var i = 0; i < params.length; i++) {
         if (params[i].indexOf('parent=') == 0) {
           var p = params[i].split('=');
           var parent = decodeURIComponent(p[1]);
           var r = /google.com\/a\/([^\/]*)\//.exec(parent);
           var domainName = r ? r[1] : null;
           return domainName;
        }
      }
      return null;
     };
     
     /**
      * main method driving the gadget. 
      */         
     function init() { 
       document.getElementById('resultDisplayRegion').style.display = 'none'; 
       var healthCheckUrl = 'http://feedserver-enterprise.googleusercontent.com/a/' +
           domain + '/g/HealthCheckUrl';      
       var params = {};
       params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.DOM;
       params[gadgets.io.RequestParameters.REFRESH_INTERVAL] = 0;  
       params.AUTHORIZATION = 'SIGNED'; 
       params['OAUTH_ENABLE_PRIVATE_NETWORK'] = 'true';
       displayStatusMsg('retrieving healthcheckurl feed for domain: ' + domain);
       gadgets.io.makeRequest(healthCheckUrl, processHealthCheckUrlResponse, params);
     };  
       
     /**
      * Parse the healthcheck url feed response.
      *
      * @param {Object} response data returned for the Health Check url. 
      */        
     function processHealthCheckUrlResponse(response) {
       // is there response
       if (!response || !response.data) {
         displayStatusMsg('No healthcheckurl feed for ' + domain);
         return;          
       }
       
       // parse the response and extract the clientId, url pairs
       // TODO: should use gdata api to do this parsing. the following is ugly
       var clientIdList = [];
       var urlList = [];
       var entityList = response.data.getElementsByTagName('entity');           
       for (var count = 0, entity; entity = entityList[count]; count++) {             
         for (var child = entity.firstChild; child; child = child.nextSibling) {
           if (child.nodeName == 'clientId' ) {
             clientIdList[count] = child.firstChild.nodeValue ; 
           } else if (child.nodeName == 'url' ) {
             urlList[count] = child.firstChild.nodeValue ;              
           }
         }
       }
       
       // did we get any entities?
       if (count == 0) {
         displayStatusMsg('No data in healthurl feed for ' + domain);                            
         return;
       }
           
       // Display the Client Ids and urls in a table
       displayHealthCheckUrlFeedResponse(clientIdList, urlList);           
           
       // fetch the health check url's
       fetchHealthCheckUrls(urlList);                 
     };   

     /**
      * Display the healthcheck url's and the ClientIds fetched from the feed.
      *
      * @param {Array.<string>} clientIdList the list of clientIds .
      * @param {Array.<string>} urlList the list of Client urls. 
      */
     function displayHealthCheckUrlFeedResponse(clientIdList, urlList, nameList) {
     
       // clear the currently displayed table data - rows except table header
       var numRows = document.getElementById('resultTable').rows.length;
       for (var rowNo = numRows; rowNo > 1; rowNo--) {
         document.getElementById('resultTable').deleteRow(rowNo - 1);
       }
       
       // process data
       for (var index = 0, numFetched = urlList.length; index < numFetched; index++) {
         var newTableRow = document.getElementById('resultTable').insertRow(index + 1);
         
         // clientId  
         var clientIdCell = newTableRow.insertCell(0);
         clientIdCell.innerHTML = clientIdList[index];
         clientIdCell.id = 'clientId' + index;
         // latency
         var latencyCell = newTableRow.insertCell(1);
         latencyCell.id = 'latency' + index;
         // response
         var responseCell = newTableRow.insertCell(2);
         responseCell.id = 'response' + index; 
       }
       document.getElementById('resultDisplayRegion').style.display = 'block';
       _IG_AdjustIFrameHeight();
     };

     /**
      * Fetch all the healthcheck urls 
      *
      * @param {Array.<string>} urlList the list of healthcheck urls. 
      */          
     function fetchHealthCheckUrls(urlList) {  
       var params = {};
       params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.TEXT;
       // prevent caching of healthcheck url fetch results by gadget server
       params[gadgets.io.RequestParameters.REFRESH_INTERVAL] = 0;
       params.AUTHORIZATION = 'SIGNED';
       params['OAUTH_ENABLE_PRIVATE_NETWORK'] = 'true';
       for (var index = 0, numFetched = urlList.length; index < numFetched; index++) {
         var clientUrl = urlList[index];
         if (clientUrl) {
           var requestStartTime = new Date().valueOf();
           gadgets.io.makeRequest(clientUrl,
               _IG_Callback(processPingResponse, requestStartTime, index), params);   
         }
       }
     };
  
     /**
      * processes the data returned for a healthcheck url fetch.
      *
      * @param {Object} response is the data returned for a Client url.
      * @param {number} requestStartTime is the time when request was made.
      * @param {number} rowNum is the Row No in the table.  
      */
     function processPingResponse(response, requestStartTime, rowNum) {       
       var requestEndTime = new Date().valueOf();
       var latencyCell = 'latency' + rowNum;
       document.getElementById(latencyCell).innerHTML = requestEndTime - requestStartTime;
        
       // what do we have in the response
       var healthCheckResponse;
       if (response == null || response.text == null || response.text == '') {
         if (response.errors) {
           healthCheckResponse = '<span class = warn> Http Status code: ' + response.rc + '</span>';
         } else {
           healthCheckResponse = "no data / no errors";
         }
       } else {
         healthCheckResponse = response.text;
       } 
       var responseCell = 'response' + rowNum;
       document.getElementById(responseCell).innerHTML = healthCheckResponse;
          
       _IG_AdjustIFrameHeight();
     };
                                                                        
     /**
      * Displays status messages about the gadget operations.
      * @param {string} msgTxt  The message to be displayed.
      */
     var msgId = null;                                                                                                                                                                                                 
     function displayStatusMsg(msgTxt) {
       var msgCreator = new gadgets.MiniMessage( __MODULE_ID__, _gel('statusBar') );
       if (msgId != null) {
         msgCreator.dismissMessage(msgId);
         msgId = null;
       }
       msgId = msgCreator.createTimerMessage(msgTxt, 5);
     };      
     
     // start the gadget
     gadgets.util.registerOnLoadHandler(init);      

     // run prober every "run_freq" minutes
     var domain = detectDomainName();
     var run_freq = new gadgets.Prefs().getString('run_freq');
     window.setInterval('init()', (run_freq * 60 * 1000));    
   </script>  
     
  ]]>
  </Content>
</Module>

