/* Copyright 2008 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * $Id$
 */
syntax = "proto2";

package sdc_frame;
option java_package = "com.google.dataconnector.protocol.proto";

message FrameInfo {

  enum Type {
    SOCKET_DATA = 0;
    REGISTRATION = 1;
    HEALTH_CHECK = 2;
    AUTHORIZATION = 3;
    FETCH_REQUEST = 4;
    SOCKET_SESSION = 5; // Asynchronous session data.
  }

  optional int64 sequence = 1;
  optional Type type = 2;
  optional bytes payload = 3;
}

message SocketDataInfo {

  enum State {
    START = 0;
    CONTINUE = 1;
    CLOSE = 2;
  }

  required int64 connectionId = 1;
  required State state = 2;
  optional bytes segment = 3;
}

message AuthorizationInfo {

  enum ResultCode {
    OK = 1;
    ACCESS_DENIED = 2;
    ACCESS_DENIED_CAPTCHA_REQUIRED_TO_UNLOCK = 3;
    SERVER_ERROR = 4;
  }

  enum AuthType {
    PASSWORD = 1;
  }

  // request
  optional string email = 1;
  optional AuthType authType = 2;
  optional string password = 3;

  // response
  optional ResultCode result = 5;
  optional string statusMessage = 6;
}

message ResourceKey {
  required string ip = 1;
  required int32 port = 2;
  required int64 key = 3;
}

message RegistrationInfo {

  enum ResultCode {
    OK = 1;
    FAILED = 2;
  }

  // request
  optional string xml = 1;

  // response.
  optional string statusMessage = 2;
  optional ResultCode result = 3;
  optional ServerSuppliedConf serverSuppliedConf = 4;

}

message ServerSuppliedConf {
  optional int32 healthCheckTimeout = 4;
  optional int32 healthCheckWakeUpInterval = 5;
}

message HealthCheckInfo {

  enum Source {
    CLIENT = 1;
    SERVER = 2;
  }

  enum Type {
    REQUEST = 1;
    RESPONSE = 2;
  }

  optional int64 timeStamp = 1;

  // server provided configuration parameters.
  optional Source source = 2;
  optional Type type = 3;
}

// Generic message header of key/value pair.
message MessageHeader {
  required string key = 1;
  required string value = 2;
}

// Proto definition corresponding to FrameInfo.Type=FETCH_REQUEST
message FetchRequest {
  required string id = 1;
  required string resource = 2;
  optional string strategy = 3;
  repeated MessageHeader headers = 4;
  optional bytes contents = 5;
}

// Proto definition of response to FrameInfo.Type=FETCH_REQUEST
message FetchReply {
  required string id = 1;
  required int32 status = 2;
  repeated MessageHeader headers = 3;
  optional bytes contents = 4;
  optional int64 latency = 5;
}

// Proto definition corresponding to FrameInfo.Type=SOCKET_REQUEST
enum SocketSessionVerb {
  CREATE = 1;  // Setup prior to creating socket: DNS lookup etc.
  CONNECT = 2; // Connect
  CLOSE = 3; // Close the socket.
}

message SocketSessionRequest {
  required SocketSessionVerb verb = 1;
  required bytes socketHandle = 2;
  required string hostname = 3;
  optional int32 port = 4;
  repeated MessageHeader headers = 5;
  optional int64 timeout = 6;
}

// Proto definition of response to FrameInfo.Type=SOCKET_REQUEST
message SocketSessionReply {
  enum Status {
    OK = 1;
    ERROR = 2;
    UNKNOWN_HOST = 3;
    CANNOT_CONNECT = 4;
  }
  required SocketSessionVerb verb = 1;
  required bytes socketHandle = 2;
  required Status status = 3;
  required string hostname = 4;
  optional int32 port = 5;
  repeated MessageHeader headers = 6;
  optional int64 latency = 7;
}

// Proto definition of response to FrameInfo.Type=SOCKET_SESSION
message SocketSessionData {
  required bytes socketHandle = 1;
  optional bytes data = 2;
  optional int64 streamOffset = 3;
  optional bool close = 4;  // Closes connection after receive this data.
}

// registration request for v4 agents
message RegistrationRequestV4 {
  required string agentId = 1;
  required int32 socksServerPort = 2;
  required int32 healthCheckPort = 3;
  repeated string healthCheckGadgetUser = 4;
  repeated ResourceKey resourceKey = 5;
  required string resourcesXml = 6;
}

// registration response for V4 agents
message RegistrationResponseV4 {

  enum ResultCode {
    OK = 1;
    // if any errors in the registration request, this error is returned by the SDC server
    ERRORS_IN_REQUEST = 2;
    // if server encounters some temporary system failure, this error is returned.
    // If the registration request is retried after a while, it should succeed.
    SERVER_ERROR = 3;
  }

  optional string statusMessage = 1;
  required ResultCode result = 2;
  optional ServerSuppliedConf serverSuppliedConf = 3;
}
